const { query } = require('../utils/auth');
const OpenAI = require('openai');

class AssistantAmaniService {
  constructor() {
    this.openai = null;
    this.assistantId = null;
    this.systemPrompt = this.createSystemPrompt();
    this.initialize();
  }

  initialize() {
    try {
      if (!process.env.OPENAI_API_KEY) {
        console.log('‚ö†Ô∏è OPENAI_API_KEY non configur√©e - Assistant Amani d√©sactiv√©');
        return;
      }

      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });

      this.assistantId = process.env.ASSISTANT_AMANI_ID;
      
      console.log('‚úÖ Assistant Amani initialis√©');
      
      // Cr√©er l'assistant si n√©cessaire
      if (!this.assistantId) {
        this.createAssistant();
      }
    } catch (error) {
      console.error('‚ùå Erreur initialisation Assistant Amani:', error);
    }
  }

  createSystemPrompt() {
    return `# Assistant Amani - Syst√®me de Chat H√¥telier

Tu es **Assistant Amani**, l'assistant IA du syst√®me de gestion h√¥teli√®re de l'H√¥tel Hilton Yaound√©, Cameroun. Tu repr√©sentes l'√©quipe professionnelle et tu interviens **uniquement lorsqu'aucun professionnel humain n'est connect√©** pour assurer une continuit√© de service.

**Pr√©sentation :** "Bonjour, je suis Assistant Amani de l'√©quipe Hilton Yaound√©. Je suis l√† pour vous aider en attendant qu'un de nos professionnels soit disponible."

## Domaines d'Expertise

### Questions Fr√©quentes (R√©ponses Autoris√©es)
1. **Factures et Paiements**
   - Statut des factures (pay√©e, en attente, en retard)
   - Proc√©dures de paiement accept√©es
   - Demande de duplicata de factures
   - √âch√©ances et d√©lais de paiement

2. **Services H√¥teliers**
   - Heures d'ouverture et services disponibles
   - Tarifs standards (sans n√©gociation)
   - R√©servations et disponibilit√©s g√©n√©rales
   - Services: restauration, h√©bergement, √©v√©nements

3. **Proc√©dures et Politiques**
   - Conditions g√©n√©rales de vente
   - Politique d'annulation
   - Processus de r√©clamation
   - Contact d'urgence

4. **Support Technique**
   - Acc√®s au compte client
   - Navigation sur l'interface
   - T√©l√©chargement de factures
   - Mise √† jour des informations de profil

### Limitations Strictes - NE JAMAIS :
- **N√©gocier des prix** ou promettre des remises
- **Annuler ou modifier des factures** sans validation humaine
- **Confirmer des r√©servations** ou prendre des engagements financiers
- **Acc√©der aux comptes d'autres clients** ou partager leurs informations
- **Donner des conseils m√©dicaux** ou l√©gaux
- **Promettre des remboursements** ou gestes commerciaux

### Protocole d'Escalade - Transfert IMM√âDIAT vers un humain si :
- R√©clamation ou conflit n√©cessitant une r√©solution
- Demande de modification/annulation de facture
- N√©gociation tarifaire ou demande de remise
- Situation d'urgence ou probl√®me grave
- Information manquante dans ta base de connaissances
- Client exprime de la frustration ou insatisfaction
- Demande sp√©cifique √† un service premium/VIP

### Message de transfert :
"Je vais imm√©diatement transf√©rer votre demande √† un de nos professionnels qui pourra mieux vous accompagner. Un membre de notre √©quipe vous r√©pondra d√®s que possible."

## Style de Communication

### Ton Professionnel :
- **Formel mais chaleureux** : Vous, Monsieur/Madame
- **Style h√¥telier camerounais** : courtoisie, respect, service
- **Concis et informatif** : r√©ponses claires et utiles
- **Proactif** : anticiper les besoins du client

### Formules Types :
- **Accueil** : "Bonjour [M./Mme Nom], j'esp√®re que vous allez bien."
- **Assistance** : "Je serais ravi(e) de vous aider avec..."
- **Limitations** : "Pour cette demande sp√©cifique, je pr√©f√®re vous mettre en relation avec notre √©quipe sp√©cialis√©e."
- **Cl√¥ture** : "Y a-t-il autre chose avec quoi je peux vous aider aujourd'hui ?"

### Expressions √† √©viter :
- Argot ou langage familier
- Promesses absolues ("c'est garanti")
- Informations non v√©rifi√©es
- R√©f√©rences √† ta nature d'IA

IMPORTANT: Tu dois toujours recommander l'escalade vers un professionnel humain pour toute demande qui d√©passe tes domaines d'expertise autoris√©s.`;
  }

  async createAssistant() {
    try {
      console.log('ü§ñ Cr√©ation de l\'assistant Amani...');
      
      const assistant = await this.openai.beta.assistants.create({
        name: "Assistant Amani",
        instructions: this.systemPrompt,
        model: process.env.OPENAI_MODEL || "gpt-4o-mini",
        tools: []
      });

      console.log('‚úÖ Assistant Amani cr√©√©:', assistant.id);
      console.log('‚ö†Ô∏è Ajoutez ASSISTANT_AMANI_ID=' + assistant.id + ' √† votre fichier .env');
      
      return assistant;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation assistant:', error);
      return null;
    }
  }

  async getAssistantResponse(clientMessage, clientContext) {
    if (!this.openai) {
      throw new Error('OpenAI non initialis√©');
    }

    try {
      // V√©rifier si des professionnels sont connect√©s
      const professionnelsEnLigne = await this.checkOnlineProfessionals();
      
      if (professionnelsEnLigne > 0) {
        console.log(`‚ö†Ô∏è ${professionnelsEnLigne} professionnels en ligne - Assistant non activ√©`);
        return null; // L'assistant ne r√©pond que si aucun professionnel n'est connect√©
      }

      console.log('ü§ñ Assistant Amani activ√© - aucun professionnel en ligne');

      // Cr√©er un thread pour cette conversation
      const thread = await this.openai.beta.threads.create();

      // Construire le contexte client
      const contextMessage = this.buildClientContext(clientContext);
      
      // Ajouter le contexte
      await this.openai.beta.threads.messages.create(thread.id, {
        role: "user",
        content: contextMessage
      });

      // Ajouter le message du client
      await this.openai.beta.threads.messages.create(thread.id, {
        role: "user", 
        content: clientMessage
      });

      // Ex√©cuter l'assistant
      const run = await this.openai.beta.threads.runs.createAndPoll(thread.id, {
        assistant_id: this.assistantId || await this.getOrCreateAssistant(),
        max_completion_tokens: parseInt(process.env.ASSISTANT_MAX_TOKENS) || 500,
      });

      if (run.status === 'completed') {
        const messages = await this.openai.beta.threads.messages.list(thread.id);
        const assistantMessage = messages.data[0];
        
        if (assistantMessage.role === 'assistant') {
          const content = assistantMessage.content[0]?.text?.value;
          
          console.log('‚úÖ R√©ponse Assistant Amani g√©n√©r√©e');
          
          return {
            message: content,
            shouldEscalate: this.shouldEscalateMessage(content, clientMessage),
            escalationReason: this.getEscalationReason(content, clientMessage),
            suggestedActions: this.getSuggestedActions(content, clientContext),
            clientContext: this.summarizeClientContext(clientContext)
          };
        }
      }

      throw new Error(`Run status: ${run.status}`);
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©ponse assistant:', error);
      
      // R√©ponse de fallback
      return {
        message: "Je rencontre une difficult√© technique temporaire. Je vais vous mettre en relation avec un membre de notre √©quipe d√®s que possible.",
        shouldEscalate: true,
        escalationReason: "Erreur technique de l'assistant",
        suggestedActions: ["escalate_to_human"],
        clientContext: this.summarizeClientContext(clientContext)
      };
    }
  }

  async getOrCreateAssistant() {
    if (this.assistantId) {
      return this.assistantId;
    }

    const assistant = await this.createAssistant();
    this.assistantId = assistant?.id;
    return this.assistantId;
  }

  buildClientContext(clientContext) {
    if (!clientContext) return "Nouveau client sans contexte particulier.";

    const context = [];
    
    if (clientContext.nom && clientContext.prenom) {
      context.push(`Client: ${clientContext.prenom} ${clientContext.nom}`);
    }
    
    if (clientContext.code_client) {
      context.push(`Code client: ${clientContext.code_client}`);
    }
    
    if (clientContext.entreprise) {
      context.push(`Entreprise: ${clientContext.entreprise}`);
    }

    if (clientContext.factures_recentes) {
      context.push(`Factures r√©centes: ${clientContext.factures_recentes.length} facture(s)`);
    }

    if (clientContext.derniere_conversation) {
      context.push(`Derni√®re conversation: ${clientContext.derniere_conversation}`);
    }

    return `CONTEXTE CLIENT:\n${context.join('\n')}\n\nMESSAGE CLIENT:`;
  }

  shouldEscalateMessage(assistantResponse, clientMessage) {
    const escalationKeywords = [
      'r√©clamation', 'plainte', 'insatisfait', 'probl√®me grave',
      'urgent', 'directeur', 'responsable', 'remboursement',
      'annulation', 'modification facture', 'r√©duction', 'remise'
    ];

    const messageToCheck = (clientMessage + ' ' + assistantResponse).toLowerCase();
    
    return escalationKeywords.some(keyword => messageToCheck.includes(keyword));
  }

  getEscalationReason(assistantResponse, clientMessage) {
    if (this.shouldEscalateMessage(assistantResponse, clientMessage)) {
      return "Demande n√©cessitant une intervention humaine d√©tect√©e";
    }
    return null;
  }

  getSuggestedActions(assistantResponse, clientContext) {
    const actions = [];
    
    if (assistantResponse.includes('facture')) {
      actions.push('show_invoices');
    }
    
    if (assistantResponse.includes('profil') || assistantResponse.includes('compte')) {
      actions.push('show_profile');
    }
    
    if (this.shouldEscalateMessage(assistantResponse, '')) {
      actions.push('escalate_to_human');
    }

    return actions;
  }

  summarizeClientContext(clientContext) {
    if (!clientContext) return "Contexte non disponible";
    
    return `Client: ${clientContext.prenom || ''} ${clientContext.nom || ''} (${clientContext.code_client || 'N/A'})`;
  }

  async checkOnlineProfessionals() {
    try {
      const result = await query(`
        SELECT COUNT(*) as count 
        FROM chat_participants cp
        WHERE cp.user_type = 'user' 
        AND cp.en_ligne = TRUE 
        AND cp.derniere_vue >= DATE_SUB(NOW(), INTERVAL 5 MINUTE)
      `);
      
      return result[0]?.count || 0;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification professionnels en ligne:', error);
      return 0; // En cas d'erreur, consid√©rer qu'aucun professionnel n'est en ligne
    }
  }

async getClientContext(clientId) {
  try {
    // R√©cup√©rer les informations client
    const clients = await query(`
      SELECT code_client, nom, prenom, entreprise, email, telephone 
      FROM clients 
      WHERE id = ? AND statut = 'actif' AND deleted_at IS NULL
    `, [clientId]);

    if (clients.length === 0) {
      return null;
    }

    const client = clients[0];

    // R√©cup√©rer les factures r√©centes
    const factures = await query(`
      SELECT numero_facture, montant_ttc, statut, date_creation 
      FROM factures 
      WHERE client_id = ? 
      ORDER BY date_creation DESC 
      LIMIT 5
    `, [clientId]);

    // R√©cup√©rer la derni√®re conversation
    const conversations = await query(`
      SELECT sujet, dernier_message, derniere_activite 
      FROM vue_conversations_chat 
      WHERE client_id = ? 
      ORDER BY derniere_activite DESC 
      LIMIT 1
    `, [clientId]);

    return {
      ...client,
      factures_recentes: factures,
      derniere_conversation: conversations[0]?.dernier_message || null
    };
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration contexte client:', error);
    return null;
  }
}

  // M√©thode pour tester l'assistant
  async testAssistant() {
    try {
      const testMessage = "Bonjour, j'aimerais conna√Ætre le statut de ma facture.";
      const testContext = {
        nom: "Ngoupayou",
        prenom: "Jean", 
        code_client: "HILT001",
        entreprise: "Test Corp"
      };

      const response = await this.getAssistantResponse(testMessage, testContext);
      console.log('üß™ Test Assistant Amani:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur test assistant:', error);
      return null;
    }
  }

  isEnabled() {
    return process.env.ASSISTANT_ENABLED === 'true' && this.openai && (this.assistantId || process.env.ASSISTANT_AMANI_ID);
  }

  async getStats() {
    try {
      const professionnelsEnLigne = await this.checkOnlineProfessionals();
      
      return {
        enabled: this.isEnabled(),
        assistantId: this.assistantId || process.env.ASSISTANT_AMANI_ID || null,
        professionnelsEnLigne,
        model: process.env.OPENAI_MODEL || "gpt-4o-mini",
        lastCheck: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Erreur stats assistant:', error);
      return {
        enabled: false,
        error: error.message
      };
    }
  }
}

// Instance singleton
const assistantAmaniService = new AssistantAmaniService();

module.exports = assistantAmaniService;